/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.10/samples
 */

plugins {
    java
    id("org.springframework.boot") version "3.5.4"
    id("io.spring.dependency-management") version "1.1.7"
    id("com.diffplug.spotless") version "7.2.1"
}

data class Version(
    val major: Int,
    val minor: Int,
    val patch: Int,
) {
    override fun toString(): String = "$major.$minor.$patch"
}

val ver = Version(0, 1, 0)

group = "vn.aesolutions"
version = ver.toString()
description = "Root project for AEStore Spring Boot"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Modules: Data JPA, Web and Security
    // Database and Spring Security, we don't need it yet
    // implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    // implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    // This dependency provides health monitoring stats to the endpoint, we don't need it yet.
    // implementation("org.springframework.boot:spring-boot-starter-actuator")

    // Helps with Development: Lombok, Compose
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    // Testing related: Spring Test, Security Test & JUnit
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // Runtime helper: Spring Annotations, Postgres Driver
    runtimeOnly("org.postgresql:postgresql")
}

tasks.withType<Test> {
    useJUnitPlatform()
}

spotless {
    format("misc") {
        // define the files to apply `misc` to
        target("*.gradle", ".gitattributes", ".gitignore")

        // define the steps to apply to those files
        trimTrailingWhitespace()
        leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }

    java {
        // apply a specific flavor of google-java-format
        googleJavaFormat()
        formatAnnotations()
    }
}

tasks.bootJar {
    mainClass.set("vn.aesolutions.aestore.AEStore")
}
